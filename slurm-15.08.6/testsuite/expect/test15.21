#!/usr/bin/env expect
############################################################################
# Purpose: Test of SLURM functionality
#          Test of contiguous option with multiple nodes (--contiguous option).
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "WARNING: ..." with an explanation of why the test can't be made, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
#
# NOTE:    This assumes node names are of the form <alpha><number>, where
#          the value of <number> indicates the nodes relative location.
#          Change tha node name parsing logic as needed for other formats.
############################################################################
# Copyright (C) 2002-2007 The Regents of the University of California.
# Copyright (C) 2008-2009 Lawrence Livermore National Security.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of SLURM, a resource management program.
# For details, see <http://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# SLURM is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# SLURM is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with SLURM; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id     "15.21"
set exit_code   0

print_header $test_id

proc get_host_num { host } {
	global number bin_echo exit_code

	log_user 0
	set num -1
	spawn $bin_echo $host
	expect {
		-re "($number)\r\n" {
			set num $expect_out(1,string)
			exp_continue
		}
		timeout {
			send_user "\nFAILURE: echo is not responding\n"
			set exit_code 1
		}
		eof {
			wait
		}
	}
	# Change host number to integer in case it looks like octal
	scan $num %d num
	log_user 1

	return $num
}

if {[test_front_end] != 0} {
	send_user "\nWARNING: This test is incompatible with front-end systems\n"
	exit 0
} elseif {[test_topology] != 0} {
	send_user "\nWARNING: This test is incompatible topology configured systems\n"
	exit 0
} elseif {[test_serial]} {
	send_user "\nWARNING: This test is incompatible with select/serial systems\n"
	exit 0
}

set available [available_nodes $partition ""]
if {$available < 3} {
    send_user "\nWARNING: This test requires 3 nodes, but only $available available\n"
    exit 0
}

#
# Submit a 3 contiguous node job
#
set host_0_name      ""
set host_1_name      ""
set host_2_name      ""
set host_0_num       0
set host_1_num       0
set host_2_num       0
set job_id           0
set timeout $max_job_delay
if {[test_launch_poe]} {
	set node_name_env MP_I_UPMD_HOSTNAME
} else {
	set node_name_env SLURMD_NODENAME
}

set timeout $max_job_delay
set salloc_pid [spawn $salloc -N3-3 --contiguous --immediate -t1 $srun -l $bin_printenv $node_name_env]
expect {
	-re "Granted job allocation ($number)" {
		set job_id $expect_out(1,string)
		exp_continue
	}
	-re "Unable to allocate resources" {
		send_user "\nWARNING: can't test salloc task distribution\n"
		exit $exit_code
	}
	-re "($number): *($alpha_numeric_under)" {
		set task_id $expect_out(1,string)
		if {$task_id == 0} {
			set host_0_name $expect_out(2,string)
			set host_0_num [get_host_num $expect_out(2,string)]
		}
		if {$task_id == 1} {
			set host_1_name $expect_out(2,string)
			set host_1_num [get_host_num $expect_out(2,string)]
		}
		if {$task_id == 2} {
			set host_2_name $expect_out(2,string)
			set host_2_num [get_host_num $expect_out(2,string)]
		}
		exp_continue
	}
	timeout {
		if {$job_id != 0} {
			cancel_job $job_id
		}
		slow_kill [expr 0 - $salloc_pid]
		send_user "\nFAILURE: salloc not responding\n"
		exit 1
	}
	eof {
		wait
	}
}

#
# Verify node count
#
if {[test_front_end] != 0} {
	send_user "\nWARNING: Additional testing is incompatible with front-end systems\n"
	exit $exit_code
}

if {[string compare $host_0_name ""] == 0} {
	send_user "\nFAILURE: Did not get hostname of task 0\n"
	set exit_code   1
}
if {[string compare $host_1_name ""] == 0} {
	send_user "\nFAILURE: Did not get hostname of task 1\n"
	set exit_code   1
}
if {[string compare $host_2_name ""] == 0} {
	send_user "\nFAILURE: Did not get hostname of task 2\n"
	set exit_code   1
}

#
# Verify node sequence number
#
if {$host_0_num == -1 || $host_1_num == -1 || $host_2_num == -1} {
	send_user "\nWARNING: node names do not have trailing numbers as needed for this test\n"
} else {
	if {$host_1_num != [expr $host_0_num + 1]} {
		send_user "\nFAILURE: node sequence number not contiguous\n"
		set exit_code   1
	}
	if {$host_2_num != [expr $host_1_num + 1]} {
		send_user "\nFAILURE: node sequence number not contiguous\n"
		set exit_code   1
	}
}

if {$exit_code == 0} {
	send_user "\nSUCCESS\n"
}
exit $exit_code
